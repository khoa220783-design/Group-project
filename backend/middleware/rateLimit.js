const LoginAttempt = require('../models/LoginAttempt');

/**
 * Rate Limiting Middleware - Ch·ªëng brute force login
 * Quy t·∫Øc:
 * - Cho ph√©p 5 l·∫ßn th·ª≠ trong 15 ph√∫t
 * - N·∫øu v∆∞·ª£t qu√°: Block IP trong 15 ph√∫t
 */
const loginRateLimit = async (req, res, next) => {
    try {
        const ipAddress = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];
        const email = req.body.email;

        // T√¨m login attempt t·ª´ IP n√†y
        let attempt = await LoginAttempt.findOne({ ipAddress });

        // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
        if (!attempt) {
            attempt = await LoginAttempt.create({
                ipAddress,
                email,
                attempts: 1,
                lastAttempt: new Date()
            });
            return next();
        }

        // Ki·ªÉm tra n·∫øu IP ƒëang b·ªã block
        if (attempt.blockedUntil && attempt.blockedUntil > new Date()) {
            const remainingTime = Math.ceil((attempt.blockedUntil - new Date()) / 1000 / 60);
            return res.status(429).json({
                message: `‚ö†Ô∏è B·∫°n ƒë√£ th·ª≠ ƒëƒÉng nh·∫≠p qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau ${remainingTime} ph√∫t.`,
                blockedUntil: attempt.blockedUntil,
                remainingMinutes: remainingTime
            });
        }

        // Reset n·∫øu ƒë√£ qua 15 ph√∫t k·ªÉ t·ª´ l·∫ßn th·ª≠ cu·ªëi
        const fifteenMinutesAgo = new Date(Date.now() - 15 * 60 * 1000);
        if (attempt.lastAttempt < fifteenMinutesAgo) {
            attempt.attempts = 1;
            attempt.lastAttempt = new Date();
            attempt.blockedUntil = null;
            await attempt.save();
            return next();
        }

        // TƒÉng s·ªë l·∫ßn th·ª≠
        attempt.attempts += 1;
        attempt.lastAttempt = new Date();
        attempt.email = email;

        // N·∫øu v∆∞·ª£t qu√° 5 l·∫ßn ‚Üí Block 15 ph√∫t
        if (attempt.attempts > 5) {
            attempt.blockedUntil = new Date(Date.now() + 15 * 60 * 1000);
            await attempt.save();

            console.log(`üö´ [RATE LIMIT] IP ${ipAddress} ƒë√£ b·ªã block do login th·∫•t b·∫°i qu√° nhi·ªÅu l·∫ßn`);

            return res.status(429).json({
                message: '‚ö†Ô∏è B·∫°n ƒë√£ th·ª≠ ƒëƒÉng nh·∫≠p qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.',
                blockedUntil: attempt.blockedUntil,
                remainingMinutes: 15
            });
        }

        await attempt.save();
        console.log(`‚ö†Ô∏è [RATE LIMIT] IP ${ipAddress} - L·∫ßn th·ª≠: ${attempt.attempts}/5`);

        next();
    } catch (error) {
        console.error('‚ùå L·ªói rate limiting:', error.message);
        next(); // Kh√¥ng block request n·∫øu rate limiting th·∫•t b·∫°i
    }
};

/**
 * Reset login attempts khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
 */
const resetLoginAttempts = async (ipAddress) => {
    try {
        await LoginAttempt.deleteOne({ ipAddress });
        console.log(`‚úÖ [RATE LIMIT] Reset attempts cho IP ${ipAddress}`);
    } catch (error) {
        console.error('‚ùå L·ªói reset login attempts:', error.message);
    }
};

module.exports = { loginRateLimit, resetLoginAttempts };

