const User = require('../models/User');
const PasswordReset = require('../models/PasswordReset');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const nodemailer = require('nodemailer');

// POST /forgot-password - G·ª≠i email reset password
exports.forgotPassword = async (req, res) => {
    try {
        const { email } = req.body;

        // Validation
        if (!email) {
            return res.status(400).json({ 
                message: 'Vui l√≤ng cung c·∫•p email' 
            });
        }

        // T√¨m user theo email
        const user = await User.findOne({ email });
        if (!user) {
            // Kh√¥ng ti·∫øt l·ªô l√† email kh√¥ng t·ªìn t·∫°i (security)
            return res.json({ 
                message: 'N·∫øu email t·ªìn t·∫°i, link reset password ƒë√£ ƒë∆∞·ª£c g·ª≠i' 
            });
        }

        // T·∫°o reset token (random 32 bytes hex)
        const resetToken = crypto.randomBytes(32).toString('hex');

        // L∆∞u token v√†o database (expires sau 1 gi·ªù)
        const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 hour
        
        await PasswordReset.create({
            userId: user._id,
            email: user.email,
            resetToken,
            expiresAt
        });

        // T·∫°o reset link
        const resetLink = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;

        // G·ª≠i email TH·∫¨T qua Gmail SMTP
        try {
            await sendResetEmail(email, resetLink);
            console.log(`‚úÖ Email reset password ƒë√£ g·ª≠i t·ªõi: ${email}`);
        } catch (emailError) {
            console.error('‚ùå L·ªói g·ª≠i email:', emailError.message);
            // V·∫´n log ra console ƒë·ªÉ backup
            console.log('\n=== PASSWORD RESET EMAIL (Backup) ===');
            console.log(`To: ${email}`);
            console.log(`Reset Link: ${resetLink}`);
            console.log('====================================\n');
        }

        res.json({ 
            message: 'N·∫øu email t·ªìn t·∫°i, link reset password ƒë√£ ƒë∆∞·ª£c g·ª≠i'
            // KH√îNG tr·∫£ resetToken/resetLink trong response (security)
        });
    } catch (err) {
        res.status(500).json({ 
            message: 'L·ªói server', 
            error: err.message 
        });
    }
};

// POST /reset-password - Reset password v·ªõi token
exports.resetPassword = async (req, res) => {
    try {
        const { token, newPassword } = req.body;

        // Validation
        if (!token || !newPassword) {
            return res.status(400).json({ 
                message: 'Vui l√≤ng cung c·∫•p token v√† m·∫≠t kh·∫©u m·ªõi' 
            });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({ 
                message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±' 
            });
        }

        // T√¨m token trong database
        const resetRecord = await PasswordReset.findOne({ 
            resetToken: token,
            used: false
        });

        if (!resetRecord) {
            return res.status(400).json({ 
                message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' 
            });
        }

        // Ki·ªÉm tra token ƒë√£ h·∫øt h·∫°n ch∆∞a
        if (new Date() > resetRecord.expiresAt) {
            return res.status(400).json({ 
                message: 'Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu reset m·ªõi' 
            });
        }

        // T√¨m user
        const user = await User.findById(resetRecord.userId);
        if (!user) {
            return res.status(404).json({ 
                message: 'Kh√¥ng t√¨m th·∫•y user' 
            });
        }

        // Hash m·∫≠t kh·∫©u m·ªõi
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(newPassword, salt);

        // C·∫≠p nh·∫≠t password
        user.password = hashedPassword;
        await user.save();

        // ƒê√°nh d·∫•u token ƒë√£ s·ª≠ d·ª•ng
        resetRecord.used = true;
        await resetRecord.save();

        res.json({ 
            message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi' 
        });
    } catch (err) {
        res.status(500).json({ 
            message: 'L·ªói server', 
            error: err.message 
        });
    }
};

// Helper function ƒë·ªÉ g·ª≠i email (optional - c·∫ßn config SMTP)
async function sendResetEmail(email, resetLink) {
    // Config SMTP transporter
    const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: process.env.SMTP_PORT || 587,
        secure: false,
        auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS
        }
    });

    // Email content
    const mailOptions = {
        from: `"Group Project" <${process.env.SMTP_USER}>`,
        to: email,
        subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Group Project',
        html: `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background-color: #2AA2CD; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }
                    .content { background-color: #f9f9f9; padding: 30px; border: 1px solid #ddd; }
                    .button { background-color: #2AA2CD; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; font-weight: bold; }
                    .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üîê ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</h1>
                    </div>
                    <div class="content">
                        <p>Xin ch√†o,</p>
                        <p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh t·∫°i <strong>Group Project</strong>.</p>
                        <p>Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                        <div style="text-align: center;">
                            <a href="${resetLink}" class="button">ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</a>
                        </div>
                        <p><strong>L∆∞u √Ω:</strong></p>
                        <ul>
                            <li>Link n√†y s·∫Ω <strong>h·∫øt h·∫°n sau 1 gi·ªù</strong></li>
                            <li>N·∫øu kh√¥ng ph·∫£i b·∫°n y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y</li>
                            <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                        </ul>
                        <p style="margin-top: 20px; font-size: 12px; color: #666;">
                            N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, copy link sau v√†o tr√¨nh duy·ªát:<br>
                            <span style="word-break: break-all; color: #2AA2CD;">${resetLink}</span>
                        </p>
                    </div>
                    <div class="footer">
                        <p>¬© 2025 Group Project. All rights reserved.</p>
                        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
                    </div>
                </div>
            </body>
            </html>
        `
    };

    await transporter.sendMail(mailOptions);
}

